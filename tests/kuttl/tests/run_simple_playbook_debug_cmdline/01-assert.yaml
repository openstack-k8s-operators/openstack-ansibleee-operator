#
# Check for:
#
# - 1 OpenStackAnsibleEE CR
# - 1 Ansibleee-play pod
# - 1 Ansibleee-play job
# - Correct output from ansible play
#
apiVersion: ansibleee.openstack.org/v1beta1
kind: OpenStackAnsibleEE
metadata:
  name: ansibleee-play-debug
spec:
  name: openstackansibleee
  play: |
    - name: Print hello world
      hosts: localhost
      tasks:
      - name: Using debug statement
        ansible.builtin.debug:
          msg: "Hello, world this is ansibleee-play-debug.yaml"
status:
  observedGeneration: 1
  JobStatus: Running
---
apiVersion: v1
kind: Pod
metadata:
  generateName: ansibleee-play-debug-
  labels:
    job-name: ansibleee-play-debug
status:
  phase: Running
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: openstackansibleee
    job-name: ansibleee-play-debug
  name: ansibleee-play-debug
---
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
commands:
  - script: |
      pod=$(oc get pods -n $NAMESPACE -l app=openstackansibleee,job-name=ansibleee-play-debug -o name)
      description=$(oc describe -n $NAMESPACE "$pod")
      playbook_present=$(echo "$description" | grep 'Hello, world this is ansibleee-play-debug.yaml')
      cmdline_present=$(echo "$description" | grep 'Hello, world this is ansibleee-play-debug.yaml')
      echo Pod name: $pod
      echo Description: $description
      if [ -n "$playbook_present" ]; then
        exit 0
      else
        exit 1
      fi
      if [ -z "$cmdline_present" ]; then
        exit 1
      else
        exit 0
      fi
---
# when using image digests the containerImage URLs are SHA's so we verify them with a script
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
commands:
  - script: |
      tupleTemplate='{{ range (index .spec.template.spec.containers 1).env }}{{ .name }}{{ "#" }}{{ .value}}{{"\n"}}{{ end }}'
      imageTuples=$(oc get -n openstack-operators deployment openstack-ansibleee-operator-controller-manager -o go-template="$tupleTemplate")
      # format of imageTuple is: RELATED_IMAGE_ANSIBLEEE_<service>#<image URL with SHA> separated by newlines
      for ITEM in $(echo $imageTuples); do
        # it is an image
        if echo $ITEM | grep 'RELATED_IMAGE' &> /dev/null; then
          NAME=$(echo $ITEM | sed -e 's|^RELATED_IMAGE_ANSIBLEEE_\([^_]*\)_.*|\1|')
          IMG_FROM_ENV=$(echo $ITEM | sed -e 's|^.*#\(.*\)|\1|')
          template='{{.spec.image}}'
          case $NAME in
            IMAGE)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE openstackansibleee ansibleee-play-debug -o go-template="$template")
              ;;
          esac
          if [ "$SERVICE_IMAGE" != "$IMG_FROM_ENV" ]; then
            echo "$SERVICE_IMAGE image does not equal $IMG_FROM_ENV"
            exit 1
          fi
        fi
      done

      exit 0
